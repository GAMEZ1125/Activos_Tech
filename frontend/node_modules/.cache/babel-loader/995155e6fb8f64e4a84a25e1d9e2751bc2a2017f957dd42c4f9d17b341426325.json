{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Gestion_activos\\\\frontend\\\\src\\\\components\\\\CampoActivoFijoForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport api from '../services/api';\nimport '../css/CampoActivoFijoForm.css'; // Importa el archivo CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CampoActivoFijoForm = () => {\n  _s();\n  const {\n    tipo_activo_fijo_id\n  } = useParams();\n  const [campos, setCampos] = useState([]);\n  const [selectedCampos, setSelectedCampos] = useState([]);\n  const [tipoActivoFijoNombre, setTipoActivoFijoNombre] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchCampos = async () => {\n      try {\n        const response = await api.get('/campos');\n        setCampos(response.data);\n        console.log('Campos obtenidos:', response.data);\n\n        // Selecciona automáticamente los campos obligatorios\n        const obligatorios = response.data.filter(campo => campo.obligatorio).map(campo => campo.id);\n        console.log('Campos obligatorios:', obligatorios);\n        setSelectedCampos(prevSelectedCampos => [...new Set([...prevSelectedCampos, ...obligatorios])]);\n        console.log('Campos seleccionados después de agregar obligatorios:', [...new Set([...selectedCampos, ...obligatorios])]);\n      } catch (error) {\n        console.error('Error al obtener campos:', error);\n        alert('Error al obtener los campos.');\n      }\n    };\n    const fetchSelectedCampos = async () => {\n      try {\n        const response = await api.get(`/campos-activos-fijos/tipo/${tipo_activo_fijo_id}`);\n        const selected = response.data.map(campo => campo.campo_id);\n        console.log('Campos seleccionados del tipo:', selected);\n        setSelectedCampos(prevSelectedCampos => [...new Set([...prevSelectedCampos, ...selected])]);\n        console.log('Campos seleccionados después de agregar seleccionados del tipo:', [...new Set([...selectedCampos, ...selected])]);\n        // Actualiza los campos con la propiedad visible\n        setCampos(prevCampos => prevCampos.map(campo => {\n          var _response$data$find;\n          return {\n            ...campo,\n            visible: ((_response$data$find = response.data.find(selectedCampo => selectedCampo.campo_id === campo.id)) === null || _response$data$find === void 0 ? void 0 : _response$data$find.visible) || false\n          };\n        }));\n      } catch (error) {\n        console.error('Error al obtener campos seleccionados:', error);\n        alert('Error al obtener los campos seleccionados.');\n      }\n    };\n    const fetchTipoActivoFijoNombre = async () => {\n      try {\n        const response = await api.get(`/tipos-activos-fijos/${tipo_activo_fijo_id}`);\n        setTipoActivoFijoNombre(response.data.nombre);\n      } catch (error) {\n        console.error('Error al obtener el nombre del tipo de activo fijo:', error);\n        alert('Error al obtener el nombre del tipo de activo fijo.');\n      }\n    };\n    fetchCampos();\n    if (tipo_activo_fijo_id) {\n      fetchSelectedCampos();\n      fetchTipoActivoFijoNombre();\n    }\n  }, [tipo_activo_fijo_id]);\n  const handleCampoChange = campoId => {\n    // No permitir deseleccionar campos obligatorios\n    const campo = campos.find(c => c.id === campoId);\n    if (campo !== null && campo !== void 0 && campo.obligatorio) return;\n    setSelectedCampos(prevSelectedCampos => prevSelectedCampos.includes(campoId) ? prevSelectedCampos.filter(id => id !== campoId) : [...prevSelectedCampos, campoId]);\n  };\n  const handleSelectAll = () => {\n    const allCampos = campos.map(campo => campo.id);\n    setSelectedCampos(allCampos);\n  };\n  const handleDeselectAll = () => {\n    const obligatorios = campos.filter(campo => campo.obligatorio).map(campo => campo.id);\n    setSelectedCampos(obligatorios);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await api.put(`/campos-activos-fijos/tipo/${tipo_activo_fijo_id}`, {\n        campos: campos.map(campo => ({\n          campo_id: campo.id,\n          visible: selectedCampos.includes(campo.id)\n        }))\n      });\n      alert('Campos actualizados con éxito.');\n      navigate('/tipos-activos-fijos');\n    } catch (error) {\n      console.error('Error al actualizar campos:', error);\n      alert('Error al actualizar los campos.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Asignar Campos para Tipo de Activo Fijo: \", tipoActivoFijoNombre]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary me-2\",\n          onClick: handleSelectAll,\n          children: \"Vincular Todos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: handleDeselectAll,\n          children: \"Desvincular Todos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-grid\",\n        children: campos.map(campo => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: `form-check-input ${campo.visible ? 'visible-true' : ''}`,\n            id: `campo-${campo.id}`,\n            checked: selectedCampos.includes(campo.id),\n            onChange: () => handleCampoChange(campo.id),\n            disabled: campo.obligatorio // Deshabilita el checkbox si el campo es obligatorio\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-check-label\",\n            htmlFor: `campo-${campo.id}`,\n            children: campo.nombre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, campo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mt-3\",\n        children: \"Guardar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(CampoActivoFijoForm, \"cf4g1m62lYTRY7yQJAwrpZjM5vE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CampoActivoFijoForm;\nexport default CampoActivoFijoForm;\nvar _c;\n$RefreshReg$(_c, \"CampoActivoFijoForm\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","api","jsxDEV","_jsxDEV","CampoActivoFijoForm","_s","tipo_activo_fijo_id","campos","setCampos","selectedCampos","setSelectedCampos","tipoActivoFijoNombre","setTipoActivoFijoNombre","navigate","fetchCampos","response","get","data","console","log","obligatorios","filter","campo","obligatorio","map","id","prevSelectedCampos","Set","error","alert","fetchSelectedCampos","selected","campo_id","prevCampos","_response$data$find","visible","find","selectedCampo","fetchTipoActivoFijoNombre","nombre","handleCampoChange","campoId","c","includes","handleSelectAll","allCampos","handleDeselectAll","handleSubmit","e","preventDefault","put","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onClick","checked","onChange","disabled","htmlFor","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/Gestion_activos/frontend/src/components/CampoActivoFijoForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport api from '../services/api';\nimport '../css/CampoActivoFijoForm.css'; // Importa el archivo CSS\n\nconst CampoActivoFijoForm = () => {\n  const { tipo_activo_fijo_id } = useParams();\n  const [campos, setCampos] = useState([]);\n  const [selectedCampos, setSelectedCampos] = useState([]);\n  const [tipoActivoFijoNombre, setTipoActivoFijoNombre] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchCampos = async () => {\n      try {\n        const response = await api.get('/campos');\n        setCampos(response.data);\n        console.log('Campos obtenidos:', response.data);\n        \n        // Selecciona automáticamente los campos obligatorios\n        const obligatorios = response.data.filter(campo => campo.obligatorio).map(campo => campo.id);\n        console.log('Campos obligatorios:', obligatorios);\n        setSelectedCampos(prevSelectedCampos => [...new Set([...prevSelectedCampos, ...obligatorios])]);\n        console.log('Campos seleccionados después de agregar obligatorios:', [...new Set([...selectedCampos, ...obligatorios])]);\n      } catch (error) {\n        console.error('Error al obtener campos:', error);\n        alert('Error al obtener los campos.');\n      }\n    };\n\n    const fetchSelectedCampos = async () => {\n      try {\n        const response = await api.get(`/campos-activos-fijos/tipo/${tipo_activo_fijo_id}`);\n        const selected = response.data.map(campo => campo.campo_id);\n        console.log('Campos seleccionados del tipo:', selected);\n        setSelectedCampos(prevSelectedCampos => [...new Set([...prevSelectedCampos, ...selected])]);\n        console.log('Campos seleccionados después de agregar seleccionados del tipo:', [...new Set([...selectedCampos, ...selected])]);\n        // Actualiza los campos con la propiedad visible\n        setCampos(prevCampos => prevCampos.map(campo => ({\n          ...campo,\n          visible: response.data.find(selectedCampo => selectedCampo.campo_id === campo.id)?.visible || false\n        })));\n      } catch (error) {\n        console.error('Error al obtener campos seleccionados:', error);\n        alert('Error al obtener los campos seleccionados.');\n      }\n    };\n\n    const fetchTipoActivoFijoNombre = async () => {\n      try {\n        const response = await api.get(`/tipos-activos-fijos/${tipo_activo_fijo_id}`);\n        setTipoActivoFijoNombre(response.data.nombre);\n      } catch (error) {\n        console.error('Error al obtener el nombre del tipo de activo fijo:', error);\n        alert('Error al obtener el nombre del tipo de activo fijo.');\n      }\n    };\n\n    fetchCampos();\n    if (tipo_activo_fijo_id) {\n      fetchSelectedCampos();\n      fetchTipoActivoFijoNombre();\n    }\n  }, [tipo_activo_fijo_id]);\n\n  const handleCampoChange = (campoId) => {\n    // No permitir deseleccionar campos obligatorios\n    const campo = campos.find(c => c.id === campoId);\n    if (campo?.obligatorio) return;\n\n    setSelectedCampos(prevSelectedCampos =>\n      prevSelectedCampos.includes(campoId)\n        ? prevSelectedCampos.filter(id => id !== campoId)\n        : [...prevSelectedCampos, campoId]\n    );\n  };\n\n  const handleSelectAll = () => {\n    const allCampos = campos.map(campo => campo.id);\n    setSelectedCampos(allCampos);\n  };\n\n  const handleDeselectAll = () => {\n    const obligatorios = campos.filter(campo => campo.obligatorio).map(campo => campo.id);\n    setSelectedCampos(obligatorios);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await api.put(`/campos-activos-fijos/tipo/${tipo_activo_fijo_id}`, {\n        campos: campos.map(campo => ({\n          campo_id: campo.id,\n          visible: selectedCampos.includes(campo.id)\n        }))\n      });\n      alert('Campos actualizados con éxito.');\n      navigate('/tipos-activos-fijos');\n    } catch (error) {\n      console.error('Error al actualizar campos:', error);\n      alert('Error al actualizar los campos.');\n    }\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h2>Asignar Campos para Tipo de Activo Fijo: {tipoActivoFijoNombre}</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-3\">\n          <button type=\"button\" className=\"btn btn-secondary me-2\" onClick={handleSelectAll}>\n            Vincular Todos\n          </button>\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={handleDeselectAll}>\n            Desvincular Todos\n          </button>\n        </div>\n        <div className=\"checkbox-grid\">\n          {campos.map(campo => (\n            <div key={campo.id} className=\"form-check\">\n              <input\n                type=\"checkbox\"\n                className={`form-check-input ${campo.visible ? 'visible-true' : ''}`}\n                id={`campo-${campo.id}`}\n                checked={selectedCampos.includes(campo.id)}\n                onChange={() => handleCampoChange(campo.id)}\n                disabled={campo.obligatorio} // Deshabilita el checkbox si el campo es obligatorio\n              />\n              <label className=\"form-check-label\" htmlFor={`campo-${campo.id}`}>\n                {campo.nombre}\n              </label>\n            </div>\n          ))}\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary mt-3\">\n          Guardar\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default CampoActivoFijoForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}